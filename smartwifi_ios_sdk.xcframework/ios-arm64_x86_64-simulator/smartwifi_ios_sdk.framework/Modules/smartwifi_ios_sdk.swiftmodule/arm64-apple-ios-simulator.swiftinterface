// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios14.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name smartwifi_ios_sdk
import Foundation
import NetworkExtension
import Swift
import UIKit
@_exported import smartwifi_ios_sdk
public protocol SWFService {
  var needToSaveWAP2Identifier: Swift.Bool { get set }
  func configured(apiKey: Swift.String, userId: Swift.String, channelId: Swift.String, projectId: Swift.String, completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  func startSession(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  func stopSession()
  func connectWiFiPasspoint(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  func connectWiFiWAP2Enterprise(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  func connectWiFiWAP2(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class SWFServiceImpl : smartwifi_ios_sdk.SWFService {
  final public var needToSaveWAP2Identifier: Swift.Bool
  public static var shared: smartwifi_ios_sdk.SWFService {
    get
  }
  final public func configured(apiKey: Swift.String, userId: Swift.String, channelId: Swift.String, projectId: Swift.String, completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  final public func startSession(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  final public func stopSession()
  final public func connectWiFiPasspoint(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  final public func connectWiFiWAP2Enterprise(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  final public func connectWiFiWAP2(completion: @escaping (smartwifi_ios_sdk.EmptyResult) -> Swift.Void)
  @objc deinit
}
public protocol SWFWiFiSessionDelegate {
  func willInitializing(session: smartwifi_ios_sdk.SWFWiFiSession)
  func willRequestConfig(session: smartwifi_ios_sdk.SWFWiFiSession)
  func didRequestConfig(session: smartwifi_ios_sdk.SWFWiFiSession, error: Swift.Error?)
  func willConnectToWiFi(session: smartwifi_ios_sdk.SWFWiFiSession)
  func didConnectToWiFi(session: smartwifi_ios_sdk.SWFWiFiSession, error: Swift.Error?)
}
final public class SWFWiFiSession {
  public init(delegate: smartwifi_ios_sdk.SWFWiFiSessionDelegate)
  final public func createSession(apiKey: Swift.String, userId: Swift.String, channelId: Swift.String, projectId: Swift.String)
  final public func startSession() throws
  final public func cancelSession()
  @objc deinit
}
public struct SWFWpa2Config : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SWFWpa2Method : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SWFWpa2EnterpriseConfig : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SWFWpa2EnterpriseMethod : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum SWFServiceError : Swift.Error, Foundation.LocalizedError {
  case confirmationTypeNotSelected
  case cantFindCredentials
  case phoneNotSelected
  case cantFindRootVC
  case needConfigure
  case needSetup
  case needAuth
  case needCheckOnWiFiModule
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: smartwifi_ios_sdk.SWFServiceError, b: smartwifi_ios_sdk.SWFServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SWFSaveIdentifierResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Result3<T, D, F> {
  case success(T, D, F)
  case failure(Swift.Error)
}
public enum EmptyResult {
  case success
  case failure(Swift.Error)
}
public func == (lhs: smartwifi_ios_sdk.EmptyResult, rhs: smartwifi_ios_sdk.EmptyResult) -> Swift.Bool
public func mainThreadResultCompletion<T>(_ completion: @escaping smartwifi_ios_sdk.ResultCompletion<T>) -> smartwifi_ios_sdk.ResultCompletion<T>
public typealias ConfigsResultCompletion<T, D, F> = (smartwifi_ios_sdk.Result3<T, D, F>) -> Swift.Void
public typealias ResultCompletion<T> = (Swift.Result<T, Swift.Error>) -> Swift.Void
public typealias VoidCompletion = () -> Swift.Void
public typealias EmptyCompletion = (smartwifi_ios_sdk.EmptyResult) -> Swift.Void
public typealias IntHandler = (Swift.Int) -> Swift.Void
public struct SWFWiFiConfig<Config> : Swift.Codable where Config : Swift.Decodable, Config : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SWFPasspointConfig : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SWFPasspointMethod : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension smartwifi_ios_sdk.SWFServiceError : Swift.Equatable {}
extension smartwifi_ios_sdk.SWFServiceError : Swift.Hashable {}
